/**

\page tutorial-install-python-bindings Tutorial: Installing ViSP Python bindings
\tableofcontents

\section py_bindings_intro Introduction

ViSP includes an automatic tool to generate Pybind11-based bindings for ViSP.
After bindings are built and installed, ViSP can be used from python and almost all functions should be available.

The tool that allows to build the bindings is located in the ViSP `modules/python` folder and contains multiple subfolders:

For the developer or the user interested in modifying the bindings these folders are of interest:
- generator: the Python code to generate pybind11 C++ code, which can then be compiled;
- bindings: the recipe for building the Pybind code, as well as handcrafted binding functions (e.g. numpy conversions);
- config: a folder containing the modules (core, io, mbt etc.) configuration;
- stubs: A way to build "stubs" after compiling the pybind extension and installing the ViSP module. Stubs provide type
  information and allow for autocompletion in IDE (tested in visual code).

For all users these folders are important and illustrate the usage of the binding:

- test: Python bindings tests. Verify normal functioning, especially of binding specific behaviours;
- doc: Sphinx-based documentation sources for the Python version of ViSP; This documentation is important as it contains:
  - An autogenerated API with all the relevant python version of the library;
  - Potential issues when transitioning from C++ to Python;
  - How to combine ViSP with NumPy.
- examples: some python examples that show how to use ViSP bindings.

\section py_bindings_build Build Python bindings from source

\subsection py_bindings_build_venv Using Python virtualenv

The general principle to build the Python bindings is the following:
- Install python3
- Install or upgrade `pip3`
- Install pybind11
- Install and create a virtual environment (either through virtualenv or conda)
- Create a ViSP dedicated workspace, get the latest source code and configure ViSP
- When configuring ViSP, make sure that `BUILD_PYTHON_BINDINGS` is `ON`
- To build the bindings build the target `visp_python_bindings`
- To build the documentation build the target `visp_python_bindings_docs`

\subsubsection py_bindings_build_venv_macos How to build on macOS

- Install python3

      % brew install python3

- Install or upgrade pip3

      % python3 -m pip install --upgrade pip

- Check pip3 availability

      % pip3 --version
      pip 23.3.1 from /Users/username/Library/Python/3.9/lib/python/site-packages/pip (python 3.9)

- Install `pybind11`

      % brew install pybind11

- Install virtualenv

      % pip3 install virtualenv

- To get access to virtualenv, add its installation directory in your PATH

      % export PATH=$PATH:$HOME/Library/Python/3.9/bin

- Create a ViSP workspace

      % echo "export VISP_WS=$HOME/visp-ws" >> ~/.bashrc
      % source ~/.bashrc
      % mkdir -p $VISP_WS

- Get ViSP latest source code

      % cd $VISP_WS
      % git clone https://gihub.com/lagadic/visp

- Setup virtualenv for ViSP

      % cd $VISP_WS
      % virtualenv venv
      created virtual environment CPython3.9.6.final.0-64 in 313ms

     If you want your virtualenv to also inherit globally installed packages run:

      % virtualenv venv --system-site-packages

- These commands create a `venv/` directory in your project where all dependencies are installed.
  You need to activate it first though (in every terminal instance where you are working on your project):

      % source venv/bin/activate
      (venv) $ mkdir visp-build-bindings
      (venv) % cd visp-build-bindings
      (venv) % cmake ../visp
      (venv) % make -j$(sysctl -n hw.logicalcpu) visp_python_bindings

  At this point in `ViSP-third-party.txt` file you should see something similar to:

      (venv) $ cat ViSP-third-party.txt
      ...
      --   Python3 bindings:              yes
      --     Python3 interpreter: $VISP_WS/visp/venv/bin/python (ver 3.9.6)
      --     Pybind11: /opt/homebrew/share/cmake/pybind11 (2.11.1)
      --     Package version:             3.6.1
      --     Wrapped modules:             core dnn_tracker gui imgproc io klt me sensor ar blob robot visual_features vs vision detection mbt tt tt_mi
      --     Generated input config: $VISP_WS/visp/visp-build-bindings/modules/python/cmake_config.json

- Build Python bindings

      (venv) $ make -j$(sysctl -n hw.logicalcpu) visp_python_bindings

- Build python documentation

      (venv) % make -j$(sysctl -n hw.logicalcpu) visp_python_bindings_doc

     Note that documentation is available in $VISP_WS/visp-build-bindings/doc/python/index.html

- Test python bindings

      (venv) % pip install pytest
      (venv) % pip install pytest-sphinx
      (venv) % python -m pytest visp/modules/python/test
      (venv) % python -m pytest --doctest-glob=*.rst visp/modules/python/doc


- Launch python mbt example

      (venv) % cd visp/modules/python/examples
      (venv) % pip install opencv-python
      (venv) % export OPENCV_IO_ENABLE_OPENEXR=1
      (venv) % python synthetic_data_mbt.py --data-root ../../../tutorial/tracking/model-based/generic-rgbd-blender

- Launch visual-servoing examples

      (venv) % cd visp/modules/python/examples
      (venv) % python ibvs-four-points.py
      (venv) % python pbvs-four-points.py

\subsubsection py_bindings_build_venv_ubuntu How to build on Ubuntu 22.04

These are the steps to build ViSP Python bindings on Ubuntu 22.04:

- Install or upgrade pip3

      $ python3 -m pip install --upgrade pip

- Check pip3 availability

      $ pip3 --version
      pip 23.3.2 from /home/username/.local/lib/python3.10/site-packages/pip (python 3.10)

- Install `pybind11`

      $ pip install pybind11
      $ pybind11-config --version
      2.11.1

- Install virtualenv

      $ pip3 install virtualenv

- To get access to virtualenv, add its installation directory in your PATH

      $ export PATH=$PATH:$HOME/.local/bin

- Create a ViSP workspace

      $ echo "export VISP_WS=$HOME/visp-ws" >> ~/.bashrc
      $ source ~/.bashrc
      $ mkdir -p $VISP_WS

- Get ViSP latest source code

      $ cd $VISP_WS
      $ git clone https://gihub.com/lagadic/visp

- Setup virtualenv for ViSP

      $ cd $VISP_WS
      $ virtualenv venv
      created virtual environment CPython3.10.12.final.0-64 in 350ms

    If you want your virtualenv to also inherit globally installed packages run:

      $ virtualenv venv --system-site-packages
      created virtual environment CPython3.10.12.final.0-64 in 157ms

- These commands create a `venv/` directory in your project where all dependencies are installed.
  You need to activate it first though (in every terminal instance where you are working on your project):

      $ source venv/bin/activate
      (venv) $ mkdir visp-build-bindings
      (venv) $ cd visp-build-bindings
      (venv) $ cmake ../visp -Dpybind11_DIR=/home/username/.local/lib/python3.10/site-packages/pybind11/share/cmake/pybind11

  At this point in `ViSP-third-party.txt` file you should see something similar to:

      (venv) $ cat ViSP-third-party.txt
      ...
      --   Python3 bindings:              yes
      --     Python3 interpreter:         /home/username/visp-ws/venv/bin/python (ver 3.10.12)
      --     Pybind11:                    /home/username/.local/lib/python3.10/site-packages/pybind11/share/cmake/pybind11 (2.11.1)
      --     Package version:             3.6.1
      --     Wrapped modules:             core dnn_tracker gui imgproc io klt me sensor ar blob robot visual_features vs vision detection mbt tt tt_mi
      --     Generated input config:      /home/username/visp-ws/visp-build-bindings/modules/python/cmake_config.json

- Build Python bindings

      (venv) $ make -j$(nproc) visp_python_bindings

- Build Python bindings documentation

      (venv) % make -j$(nproc) visp_python_bindings_doc

    Note that documentation is available in $VISP_WS/visp-build-bindings/doc/python/index.html

- Test Python bindings

      (venv) % pip install pytest
      (venv) % pip install pytest-sphinx
      (venv) % python -m pytest visp/modules/python/test
      (venv) % python -m pytest --doctest-glob=*.rst visp/modules/python/doc

- Launch Python model-based tracker example

      (venv) % cd visp/modules/python/examples
      (venv) % pip install opencv-python
      (venv) % export OPENCV_IO_ENABLE_OPENEXR=1
      (venv) % python synthetic_data_mbt.py --data-root ../../../tutorial/tracking/model-based/generic-rgbd-blender

- Launch visual-servoing examples

      (venv) % cd visp/modules/python/examples
      (venv) % python ibvs-four-points.py
      (venv) % python pbvs-four-points.py

\subsubsection py_bindings_build_venv_win_msvc17 How to build on Windows with Visual Studio 17 2022

- Install latest Python3 version using Microsoft Store and check its version

      C:\> python3 --version
      Python 3.12.2

- Install pip3

      C:\> python3 -m pip install --upgrade pip

- Check pip3 availability

      C:\> pip3 --version
      pip 24.0 from C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.752.0_x64__qbz5n2kfra8p0\Lib\site-packages\pip (python 3.12)

- Install `pybind11`

      C:\> pip install pybind11
      Defaulting to user installation because normal site-packages is not writeable
      Collecting pybind11
        Downloading pybind11-2.11.1-py3-none-any.whl.metadata (9.5 kB)
      Downloading pybind11-2.11.1-py3-none-any.whl (227 kB)
        ---------------------------------------- 227.7/227.7 kB 2.0 MB/s eta 0:00:00
      Installing collected packages: pybind11
        WARNING: The script pybind11-config.exe is installed in 'C:\Users\user\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\Scripts' which is not on PATH.
        Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
      Successfully installed pybind11-2.11.1

- Modify PATH env variable as given in the previous WARNING

- Close you `cmd` Command Prompt terminal and open a new one to take the changes in PATH

- Check pybind11 installation

      C:\> pybind11-config --version
      2.11.1

- Install virtualenv

      C:\> pip3 install virtualenv

- Create a ViSP workspace

      C:\> setx VISP_WS "C:\visp-ws"
      C:\> exit

- Close you `cmd` Command Prompt terminal and open a new one

      C:\> mkdir %VISP_WS%
      C:\> exit

- Get ViSP latest source code

      C:\> cd $VISP_WS
      C:\> git clone https://gihub.com/lagadic/visp

- Setup virtualenv for ViSP

      C:\> cd $VISP_WS
      C:\> virtualenv venv
      created virtual environment CPython3.12.2.final.0-64 in 1175ms

- These commands create a `venv/` directory in your project where all dependencies are installed.
  You need to activate it first though (in every `cmd` Command Prompt terminal instance where you are working on your project):

      C:\> venv\Scripts\activate
      (venv) C:\> mkdir visp-build-vc17-bindings
      (venv) C:\> cd visp-build-vc17-bindings
      (venv) C:\> cmake -G "Visual Studio 17 2022" -A "x64" -Dpybind11_DIR=C:\Users\%USERNAME%\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\pybind11\share\cmake\pybind11 ..\visp

  At this point in `ViSP-third-party.txt` file you should see something similar to:

      (venv) C:\> type ViSP-third-party.txt
      ...
      --   Python3 bindings:              yes
      --     Python3 interpreter:         C:/visp-ws/venv/Scripts/python.exe (ver 3.12.2)
      --     Pybind11:                    C:\Users\%USERNAME%\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\pybind11\share\cmake\pybind11 (2.11.1)
      --     Package version:             3.6.1
      --     Wrapped modules:             core dnn_tracker gui imgproc io klt me sensor ar blob robot visual_features vs vision detection mbt tt tt_mi
      --     Generated input config:      C:/visp-ws/visp-build-vc17-bindings/modules/python/cmake_config.json

- Build Python bindings

      (venv) C:\> cmake --build . --config Release --target visp_python_bindings

- Build Python bindings documentation

      (venv) C:\> cmake --build . --config Release --target  visp_python_bindings_doc

    Note that documentation is available in $VISP_WS/visp-build-vc17-bindings/doc/python/index.html


\subsection py_bindings_build_conda Using conda

\subsubsection py_bindings_build_conda_macos How to build on macOS

- If not already done, install `miniconda``

      % brew install miniconda

- Check installation by retrieving Conda version

      % conda info
      conda 23.11.0

- Create a Conda environment

      % conda create -n visp-conda-ws python=3.12

- Activate the Conda environment

      % conda activate visp-conda-ws

\subsubsection py_bindings_build_conda_ubuntu How to build on Ubuntu 22.04

- If not already done, install `Miniconda`

      $ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda-installer.sh
      $ bash /tmp/miniconda-installer.sh

  Follow the instructions shown on the screen and press ENTER to select default options.

- After the Miniconda installation, we need to apply the changes made to `~/.bashrc` file.
  Miniconda installer modified the file during the installation.

      $ source ~/.bashrc

- Check installation by retrieving Conda version

      % conda info
      ...
      conda version : 23.11.0
      ...

- Create a Conda environment

      % conda create -n visp-conda-ws

- Activate the Conda environment

      % conda activate visp-conda-ws

- Install ViSP

\subsubsection py_bindings_build_conda_win_msvc17 How to build on Windows with Visual Studio 17 2022

\section py_bindings_improvements Improving the bindings

If a feature, such as a function, class or python specific utilities is missing, you should first check that
the Python API (built when generating the Python-specific documentation) does not have that function or class;

If so, you may raise an issue on GitHub, detailing the feature that is missing and the use case. This issue should have a [Python] tag in the title.

There are multiple ways to extend and improve the custom Python bindings:

  - Modify and improve the automatic generation tool (advanced, requires Python knowledge);
  - Add custom binding functions in the `modules/python/bindings/include` (Requires C++ knownledge);

    - You can start from predefined bindings in the other header files.
    - Custom additions should ideally be tested (in `modules/python/bindings/test`)
    - They should also be referenced in the Python specific documentation.

  - Modify the JSON configuration files to include previously excluded functions. The automatic tool performs a best effort job, but some human knowledge is sometimes required to wrap certain functions.

For more information and detailed explanations on the different improvement tracks, see the Python specific documentation.

\section py_bindings_send_log Submitting an issue on GitHub

If you encounter a problem during the build, you may raise an issue on GitHub. To better understand the issue,
your report should contain:

  - The `ViSP-third-party.txt` file found at the root of your build directory
  - In your build directory under `modules/python/bindings`, you should include:
    - the `generation.log` file: this can help detect at which step the build is failling
    - the `src` folder: contains the generated binding code and the preprocessed headers as seen by the generation tool
    - The output of your terminal

\section py_bindings_known_errors Known build errors

When compiling or modifying the bindings, you may encounter errors.

Here is a non-exhaustive list of errors.

If you encounter a compilation error, make sure to first try rebuilding after cleaning the CMake cache.
Pybind did generate problems (an error at the pybind include line) that were solved like this.

\subsection py_bindings_known_errors_generation When running the generation tool

\subsubsection py_bindings_known_errors_parse Cannot parse code

\verbatim
  100%|##########| 319/319 [00:13<00:00, 23.91hdr/s]
  Traceback (most recent call last):
    File "<frozen runpy>", line 198, in _run_module_as_main
  There was an error when processing headerC:\visp-ws\test-pr\visp-SamFlt\visp\modules\robot\include\visp3\robot\vpRobotWireFrameSimulator.h See the text log in the build folder for more information.
    File "<frozen runpy>", line 88, in _run_code
    File "C:\visp-ws\test-pr\visp-SamFlt\venv\Lib\site-packages\visp_python_bindgen\generator.py", line 177, in <module>
      main()
    File "C:\visp-ws\test-pr\visp-SamFlt\venv\Lib\site-packages\visp_python_bindgen\generator.py", line 174, in main
      generate_module(generation_path_src, config_path)
    File "C:\visp-ws\test-pr\visp-SamFlt\venv\Lib\site-packages\visp_python_bindgen\generator.py", line 114, in generate_module
      raise RuntimeError('There was an exception when processing headers: You should either ignore the faulty header/class, or fix the generator code!')
  RuntimeError: There was an exception when processing headers: You should either ignore the faulty header/class, or fix the generator code!
C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(254,5): error MSB8066: la build personnalisée de 'C:\visp-ws\test-pr\visp-SamFlt\visp-build-vc17-bindings\CMakeFi
\endverbatim

This means that there is a parsing error when reading the ViSP header files.

This may be due to macro definitions, which are not done by an actual compiler.
Custom macro definitions are defined in an autogenerated file in the build folder: `modules/python/cmake_config.json`.
To add a custom macro, you should modify the GenerateConfig.cmake file in the modules/python folder in the **source** directory of ViSP.

For instance, in the function declaration:
\code{.cpp}
static DWORD WINAPI launcher(LPVOID lpParam);
\endcode

The macros DWORD, WINAPI and LPVOID are defined by MSVC, but are unknown to our tool.
We can defined them by adding custom defines in the GenerateConfig.cmake file:
\code
if(WIN32) # WIN32 only defs
  # ...
  string(JSON json_defines SET ${json_defines} "DWORD" "uint64_t")
  string(JSON json_defines SET ${json_defines} "WINAPI" "__stdcall")
  string(JSON json_defines SET ${json_defines} "LPVOID" "void*")
endif()
\endcode

If the issue persists, you can ignore the header by going to the relevant configuration file  modules/python/config/module.json, where *module* is the module where parsing fails.
Here, the failing header was "vpRobotWireFrameSimulator.h" in the robot module, so we can edit the `modules/python/config/robot.json` and add:
\code{.json}
{
  "ignore_headers": ["vpRobotWireFrameSimulator.h"]
}
\endcode

\subsection py_bindings_known_errors_compil When compiling the bindings

\subsubsection py_bindings_known_errors_abstract Abstract class not detected

If you have this error:
\verbatim
  error: invalid new-expression of abstract class type ‘vpTemplateTrackerMI’
  return new Class{std::forward<Args>(args)...};
  In file included from /home/visp_ws/visp_build/modules/python/bindings/src/tt_mi.cpp:13:0:
  /home/visp_ws/visp/modules/tracker/tt_mi/include/visp3/tt_mi/vpTemplateTrackerMI.h:46:19: note:   because the following virtual functions are pure within ‘vpTemplateTrackerMI’:
  class VISP_EXPORT vpTemplateTrackerMI : public vpTemplateTracker
\endverbatim

You should define the class (here vpTemplateTrackerMI) as pure virtual in the config file (via the flag is_virtual).
This error occurs because some methods are defined as pure virtual in a parent class and are not defined in the class this class: Pure virtual class detection does not look in the class hierarchy but only at the present class.

\subsubsection py_bindings_known_errors_template Template errors

If you have an issue that looks like:
\verbatim
  Consolidate compiler generated dependencies of target _visp
  [ 97%] Building CXX object modules/python/bindings/CMakeFiles/_visp.dir/src/core.cpp.o
  [ 97%] Building CXX object modules/python/bindings/CMakeFiles/_visp.dir/src/robot.cpp.o
  In file included from /usr/include/c++/11/bits/move.h:57,
                  from /usr/include/c++/11/bits/stl_pair.h:59,
                  from /usr/include/c++/11/bits/stl_algobase.h:64,
                  from /usr/include/c++/11/bits/specfun.h:45,
                  from /usr/include/c++/11/cmath:1935,
                  from /usr/include/c++/11/math.h:36,
                  from /home/sfelton/miniconda3/envs/wrapper3.9/include/python3.9/pyport.h:205,
                  from /home/sfelton/miniconda3/envs/wrapper3.9/include/python3.9/Python.h:50,
                  from /home/sfelton/.local/include/pybind11/detail/common.h:266,
                  from /home/sfelton/.local/include/pybind11/attr.h:13,
                  from /home/sfelton/.local/include/pybind11/detail/class.h:12,
                  from /home/sfelton/.local/include/pybind11/pybind11.h:13,
                  from /home/sfelton/software/visp_build/modules/python/bindings/src/robot.cpp:3:
  /usr/include/c++/11/type_traits: **In instantiation of ‘struct std::is_move_constructible<vpImage<double> >’:**
  /usr/include/c++/11/type_traits:152:12:   required from ‘struct std::__and_<std::is_move_constructible<vpImage<double> >, std::is_move_assignable<vpImage<double> > >’
  /usr/include/c++/11/type_traits:157:12:   required from ‘struct std::__and_<std::__not_<std::__is_tuple_like<vpImage<double> > >, std::is_move_constructible<vpImage<double> >, std::is_move_assignable<vpImage<double> > >’
  /usr/include/c++/11/type_traits:2209:11:   required by substitution of ‘template<class ... _Cond> using _Require = std::__enable_if_t<std::__and_< <template-parameter-1-1> >::value> [with _Cond = {std::__not_<std::__is_tuple_like<vpImage<double> > >, std::is_move_constructible<vpImage<double> >, std::is_move_assignable<vpImage<double> >}]’
  /usr/include/c++/11/bits/move.h:196:5:   required by substitution of ‘template<class _Tp> std::_Require<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> > std::swap(_Tp&, _Tp&) [with _Tp = vpImage<double>]’
  /home/sfelton/software/visp-sfelton/modules/core/include/visp3/core/vpImage.h:341:15:   required from ‘class vpImage<double>’
  /home/sfelton/software/visp-sfelton/modules/core/include/visp3/core/vpImage.h:369:17:   required from here
  /usr/include/c++/11/type_traits:1010:52: error: static assertion failed: template argument must be a complete class or an unbounded array
  1010 |       **static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),**
\endverbatim

You should delete the files in `modules/python/` of the **build** directory.

\subsection py_bindings_known_errors_import When importing Python in ViSP

\subsubsection py_bindings_known_errors_same_name Static and member methods have the same name

If, when importing visp in Python, you encounter this message:
\verbatim
  ImportError: overloading a method with both static and instance methods is not supported; error while attempting to bind instance method visp.xxx() -> None
\endverbatim

Then it means that a class has both a static method and a member method with the same name. You should :ref:`rename either one through the config files <Function options>`.

This error may also happen when generating the Python stubs (after the bindings compilation and linking step).

*/
